{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nlet RegisterComponent = class RegisterComponent {\n  constructor(formBuilder, route, router, accountService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      username: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.accountService.register(this.form.value).pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success('Registration successful', {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['../login'], {\n          relativeTo: this.route\n        });\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  templateUrl: 'register.component.html'\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAAiCC,UAAU,QAAQ,gBAAgB;AACnE,SAASC,KAAK,QAAQ,gBAAgB;AAK/B,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAK1BC,YACYC,WAAwB,EACxBC,KAAqB,EACrBC,MAAc,EACdC,cAA8B,EAC9BC,YAA0B;IAJ1B,gBAAW,GAAXJ,WAAW;IACX,UAAK,GAALC,KAAK;IACL,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IACd,iBAAY,GAAZC,YAAY;IARxB,YAAO,GAAG,KAAK;IACf,cAAS,GAAG,KAAK;EAQb;EAEJC,QAAQ;IACJ,IAAI,CAACC,IAAI,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MAC/BC,SAAS,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACa,QAAQ,CAAC;MACpCC,QAAQ,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACa,QAAQ,CAAC;MACnCE,QAAQ,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACa,QAAQ,CAAC;MACnCG,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACiB,SAAS,CAAC,CAAC,CAAC,CAAC;KAChE,CAAC;EACN;EAEA;EACA,IAAIC,CAAC;IAAK,OAAO,IAAI,CAACR,IAAI,CAACS,QAAQ;EAAE;EAErCC,QAAQ;IACJ,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB;IACA,IAAI,CAACb,YAAY,CAACc,KAAK,EAAE;IAEzB;IACA,IAAI,IAAI,CAACZ,IAAI,CAACa,OAAO,EAAE;MACnB;;IAGJ,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACjB,cAAc,CAACkB,QAAQ,CAAC,IAAI,CAACf,IAAI,CAACgB,KAAK,CAAC,CACxCC,IAAI,CAAC1B,KAAK,EAAE,CAAC,CACb2B,SAAS,CAAC;MACPC,IAAI,EAAE,MAAK;QACP,IAAI,CAACrB,YAAY,CAACsB,OAAO,CAAC,yBAAyB,EAAE;UAAEC,oBAAoB,EAAE;QAAI,CAAE,CAAC;QACpF,IAAI,CAACzB,MAAM,CAAC0B,QAAQ,CAAC,CAAC,UAAU,CAAC,EAAE;UAAEC,UAAU,EAAE,IAAI,CAAC5B;QAAK,CAAE,CAAC;MAClE,CAAC;MACD6B,KAAK,EAAEA,KAAK,IAAG;QACX,IAAI,CAAC1B,YAAY,CAAC0B,KAAK,CAACA,KAAK,CAAC;QAC9B,IAAI,CAACV,OAAO,GAAG,KAAK;MACxB;KACH,CAAC;EACV;CACH;AAlDYtB,iBAAiB,eAD7BH,SAAS,CAAC;EAAEoC,WAAW,EAAE;AAAyB,CAAE,CAAC,GACzCjC,iBAAiB,CAkD7B;SAlDYA,iBAAiB","names":["Component","Validators","first","RegisterComponent","constructor","formBuilder","route","router","accountService","alertService","ngOnInit","form","group","firstName","required","lastName","username","password","minLength","f","controls","onSubmit","submitted","clear","invalid","loading","register","value","pipe","subscribe","next","success","keepAfterRouteChange","navigate","relativeTo","error","templateUrl"],"sourceRoot":"","sources":["C:\\DevProjects\\Training\\frontend\\src\\app\\account\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'register.component.html' })\r\nexport class RegisterComponent implements OnInit {\r\n    form!: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            username: ['', Validators.required],\r\n            password: ['', [Validators.required, Validators.minLength(6)]]\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.register(this.form.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Registration successful', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}