{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Username is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtemplate(1, LoginComponent_div_9_div_1_Template, 2, 0, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.username.errors.required);\n  }\n}\nfunction LoginComponent_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtemplate(1, LoginComponent_div_14_div_1_Template, 2, 0, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.password.errors.required);\n  }\n}\nfunction LoginComponent_span_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 14);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nexport class LoginComponent {\n  constructor(formBuilder, route, router, accountService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.accountService.login(this.f.username.value, this.f.password.value).pipe(first()).subscribe({\n      next: () => {\n        // get return url from query parameters or default to home page\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n        this.router.navigateByUrl(returnUrl);\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i3.AlertService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"ng-component\"]],\n  decls: 21,\n  vars: 11,\n  consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"type\", \"text\", \"formControlName\", \"username\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"ngClass\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [\"routerLink\", \"../register\", 1, \"btn\", \"btn-link\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\", 1);\n      i0.ɵɵtext(2, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 6);\n      i0.ɵɵtemplate(9, LoginComponent_div_9_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 4)(11, \"label\", 5);\n      i0.ɵɵtext(12, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 8);\n      i0.ɵɵtemplate(14, LoginComponent_div_14_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\")(16, \"button\", 9);\n      i0.ɵɵtemplate(17, LoginComponent_span_17_Template, 1, 0, \"span\", 10);\n      i0.ɵɵtext(18, \" Login \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"a\", 11);\n      i0.ɵɵtext(20, \"Register\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx.submitted && ctx.f.username.errors));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.username.errors);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.submitted && ctx.f.password.errors));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.password.errors);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.loading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loading);\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","first","i0","LoginComponent","constructor","formBuilder","route","router","accountService","alertService","ngOnInit","form","group","username","required","password","f","controls","onSubmit","submitted","clear","invalid","loading","login","value","pipe","subscribe","next","returnUrl","snapshot","queryParams","navigateByUrl","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\DevProjects\\training\\frontend\\src\\app\\account\\login.component.ts","C:\\DevProjects\\training\\frontend\\src\\app\\account\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'login.component.html' })\r\nexport class LoginComponent implements OnInit {\r\n    form!: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            username: ['', Validators.required],\r\n            password: ['', Validators.required]\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.login(this.f.username.value, this.f.password.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    // get return url from query parameters or default to home page\r\n                    const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n                    this.router.navigateByUrl(returnUrl);\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","<div class=\"card\">\r\n    <h4 class=\"card-header\">Login</h4>\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"mb-3\">\r\n                <label class=\"form-label\">Username</label>\r\n                <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n                <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label class=\"form-label\">Password</label>\r\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm me-1\"></span>\r\n                    Login\r\n                </button>\r\n                <a routerLink=\"../register\" class=\"btn btn-link\">Register</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}