{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { AlertType } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nimport * as i3 from \"@angular/common\";\nfunction AlertComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"span\", 1);\n    i0.ɵɵelementStart(2, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function AlertComponent_div_0_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const alert_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.removeAlert(alert_r1));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const alert_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.cssClass(alert_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", alert_r1.message, i0.ɵɵsanitizeHtml);\n  }\n}\nexport class AlertComponent {\n  constructor(router, alertService) {\n    this.router = router;\n    this.alertService = alertService;\n    this.id = 'default-alert';\n    this.fade = true;\n    this.alerts = [];\n  }\n  ngOnInit() {\n    // subscribe to new alert notifications\n    this.alertSubscription = this.alertService.onAlert(this.id).subscribe(alert => {\n      // clear alerts when an empty alert is received\n      if (!alert.message) {\n        // filter out alerts without 'keepAfterRouteChange' flag\n        this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\n        // remove 'keepAfterRouteChange' flag on the rest\n        this.alerts.forEach(x => delete x.keepAfterRouteChange);\n        return;\n      }\n      // add alert to array\n      this.alerts.push(alert);\n      // auto close alert if required\n      if (alert.autoClose) {\n        setTimeout(() => this.removeAlert(alert), 3000);\n      }\n    });\n    // clear alerts on location change\n    this.routeSubscription = this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        this.alertService.clear(this.id);\n      }\n    });\n  }\n  ngOnDestroy() {\n    // unsubscribe to avoid memory leaks\n    this.alertSubscription.unsubscribe();\n    this.routeSubscription.unsubscribe();\n  }\n  removeAlert(alert) {\n    // check if already removed to prevent error on auto close\n    if (!this.alerts.includes(alert)) return;\n    if (this.fade) {\n      // fade out alert\n      alert.fade = true;\n      // remove alert after faded out\n      setTimeout(() => {\n        this.alerts = this.alerts.filter(x => x !== alert);\n      }, 250);\n    } else {\n      // remove alert\n      this.alerts = this.alerts.filter(x => x !== alert);\n    }\n  }\n  cssClass(alert) {\n    if (!alert) return;\n    const classes = ['alert', 'alert-dismissible', 'mt-4', 'container'];\n    const alertTypeClass = {\n      [AlertType.Success]: 'alert-success',\n      [AlertType.Error]: 'alert-danger',\n      [AlertType.Info]: 'alert-info',\n      [AlertType.Warning]: 'alert-warning'\n    };\n    if (alert.type !== undefined) {\n      classes.push(alertTypeClass[alert.type]);\n    }\n    if (alert.fade) {\n      classes.push('fade');\n    }\n    return classes.join(' ');\n  }\n}\nAlertComponent.ɵfac = function AlertComponent_Factory(t) {\n  return new (t || AlertComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AlertService));\n};\nAlertComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AlertComponent,\n  selectors: [[\"alert\"]],\n  inputs: {\n    id: \"id\",\n    fade: \"fade\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"class\", 4, \"ngFor\", \"ngForOf\"], [3, \"innerHTML\"], [1, \"btn-close\", 3, \"click\"]],\n  template: function AlertComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AlertComponent_div_0_Template, 3, 4, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.alerts);\n    }\n  },\n  dependencies: [i3.NgForOf],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAiBA,eAAe,QAAQ,iBAAiB;AAGzD,SAAgBC,SAAS,QAAQ,cAAc;;;;;;;;ICJ/CC,2BAA8D;IAC1DA,0BAAyC;IACzCA,iCAAuD;IAA7BA;MAAA;MAAA;MAAA;MAAA,OAASA,2CAAkB;IAAA,EAAC;IAACA,iBAAS;;;;;IAFlCA,wCAA2B;IACnDA,eAA2B;IAA3BA,+DAA2B;;;ADOrC,OAAM,MAAOC,cAAc;EAQvBC,YAAoBC,MAAc,EAAUC,YAA0B;IAAlD,WAAM,GAAND,MAAM;IAAkB,iBAAY,GAAZC,YAAY;IAP/C,OAAE,GAAG,eAAe;IACpB,SAAI,GAAG,IAAI;IAEpB,WAAM,GAAY,EAAE;EAIsD;EAE1EC,QAAQ;IACJ;IACA,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACF,YAAY,CAACG,OAAO,CAAC,IAAI,CAACC,EAAE,CAAC,CACtDC,SAAS,CAACC,KAAK,IAAG;MACf;MACA,IAAI,CAACA,KAAK,CAACC,OAAO,EAAE;QAChB;QACA,IAAI,CAACC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,oBAAoB,CAAC;QAE7D;QACA,IAAI,CAACH,MAAM,CAACI,OAAO,CAACF,CAAC,IAAI,OAAOA,CAAC,CAACC,oBAAoB,CAAC;QACvD;;MAGJ;MACA,IAAI,CAACH,MAAM,CAACK,IAAI,CAACP,KAAK,CAAC;MAEvB;MACA,IAAIA,KAAK,CAACQ,SAAS,EAAE;QACjBC,UAAU,CAAC,MAAM,IAAI,CAACC,WAAW,CAACV,KAAK,CAAC,EAAE,IAAI,CAAC;;IAExD,CAAC,CAAC;IAEL;IACA,IAAI,CAACW,iBAAiB,GAAG,IAAI,CAAClB,MAAM,CAACmB,MAAM,CAACb,SAAS,CAACc,KAAK,IAAG;MAC1D,IAAIA,KAAK,YAAYzB,eAAe,EAAE;QAClC,IAAI,CAACM,YAAY,CAACoB,KAAK,CAAC,IAAI,CAAChB,EAAE,CAAC;;IAExC,CAAC,CAAC;EACN;EAEAiB,WAAW;IACP;IACA,IAAI,CAACnB,iBAAiB,CAACoB,WAAW,EAAE;IACpC,IAAI,CAACL,iBAAiB,CAACK,WAAW,EAAE;EACxC;EAEAN,WAAW,CAACV,KAAY;IACpB;IACA,IAAI,CAAC,IAAI,CAACE,MAAM,CAACe,QAAQ,CAACjB,KAAK,CAAC,EAAE;IAElC,IAAI,IAAI,CAACkB,IAAI,EAAE;MACX;MACAlB,KAAK,CAACkB,IAAI,GAAG,IAAI;MAEjB;MACAT,UAAU,CAAC,MAAK;QACZ,IAAI,CAACP,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKJ,KAAK,CAAC;MACtD,CAAC,EAAE,GAAG,CAAC;KACV,MAAM;MACH;MACA,IAAI,CAACE,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKJ,KAAK,CAAC;;EAE1D;EAEAmB,QAAQ,CAACnB,KAAY;IACjB,IAAI,CAACA,KAAK,EAAE;IAEZ,MAAMoB,OAAO,GAAG,CAAC,OAAO,EAAE,mBAAmB,EAAE,MAAM,EAAE,WAAW,CAAC;IAEnE,MAAMC,cAAc,GAAG;MACnB,CAAChC,SAAS,CAACiC,OAAO,GAAG,eAAe;MACpC,CAACjC,SAAS,CAACkC,KAAK,GAAG,cAAc;MACjC,CAAClC,SAAS,CAACmC,IAAI,GAAG,YAAY;MAC9B,CAACnC,SAAS,CAACoC,OAAO,GAAG;KACxB;IAED,IAAIzB,KAAK,CAAC0B,IAAI,KAAKC,SAAS,EAAE;MAC1BP,OAAO,CAACb,IAAI,CAACc,cAAc,CAACrB,KAAK,CAAC0B,IAAI,CAAC,CAAC;;IAG5C,IAAI1B,KAAK,CAACkB,IAAI,EAAE;MACZE,OAAO,CAACb,IAAI,CAAC,MAAM,CAAC;;IAGxB,OAAOa,OAAO,CAACQ,IAAI,CAAC,GAAG,CAAC;EAC5B;;AAtFSrC,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAsC;EAAAC;IAAAhC;IAAAoB;EAAA;EAAAa;EAAAC;EAAAC;EAAAC;IAAA;MCR3B5C,+DAGM;;;MAHiBA,oCAAS","names":["NavigationStart","AlertType","i0","AlertComponent","constructor","router","alertService","ngOnInit","alertSubscription","onAlert","id","subscribe","alert","message","alerts","filter","x","keepAfterRouteChange","forEach","push","autoClose","setTimeout","removeAlert","routeSubscription","events","event","clear","ngOnDestroy","unsubscribe","includes","fade","cssClass","classes","alertTypeClass","Success","Error","Info","Warning","type","undefined","join","selectors","inputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\DevProjects\\training\\frontend\\src\\app\\_components\\alert.component.ts","C:\\DevProjects\\training\\frontend\\src\\app\\_components\\alert.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy, Input } from '@angular/core';\r\nimport { Router, NavigationStart } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Alert, AlertType } from '@app/_models';\r\nimport { AlertService } from '@app/_services';\r\n\r\n@Component({ selector: 'alert', templateUrl: 'alert.component.html' })\r\nexport class AlertComponent implements OnInit, OnDestroy {\r\n    @Input() id = 'default-alert';\r\n    @Input() fade = true;\r\n\r\n    alerts: Alert[] = [];\r\n    alertSubscription!: Subscription;\r\n    routeSubscription!: Subscription;\r\n\r\n    constructor(private router: Router, private alertService: AlertService) { }\r\n\r\n    ngOnInit() {\r\n        // subscribe to new alert notifications\r\n        this.alertSubscription = this.alertService.onAlert(this.id)\r\n            .subscribe(alert => {\r\n                // clear alerts when an empty alert is received\r\n                if (!alert.message) {\r\n                    // filter out alerts without 'keepAfterRouteChange' flag\r\n                    this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\r\n\r\n                    // remove 'keepAfterRouteChange' flag on the rest\r\n                    this.alerts.forEach(x => delete x.keepAfterRouteChange);\r\n                    return;\r\n                }\r\n\r\n                // add alert to array\r\n                this.alerts.push(alert);\r\n\r\n                // auto close alert if required\r\n                if (alert.autoClose) {\r\n                    setTimeout(() => this.removeAlert(alert), 3000);\r\n                }\r\n           });\r\n\r\n        // clear alerts on location change\r\n        this.routeSubscription = this.router.events.subscribe(event => {\r\n            if (event instanceof NavigationStart) {\r\n                this.alertService.clear(this.id);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // unsubscribe to avoid memory leaks\r\n        this.alertSubscription.unsubscribe();\r\n        this.routeSubscription.unsubscribe();\r\n    }\r\n\r\n    removeAlert(alert: Alert) {\r\n        // check if already removed to prevent error on auto close\r\n        if (!this.alerts.includes(alert)) return;\r\n\r\n        if (this.fade) {\r\n            // fade out alert\r\n            alert.fade = true;\r\n\r\n            // remove alert after faded out\r\n            setTimeout(() => {\r\n                this.alerts = this.alerts.filter(x => x !== alert);\r\n            }, 250);\r\n        } else {\r\n            // remove alert\r\n            this.alerts = this.alerts.filter(x => x !== alert);\r\n        }\r\n    }\r\n\r\n    cssClass(alert: Alert) {\r\n        if (!alert) return;\r\n\r\n        const classes = ['alert', 'alert-dismissible', 'mt-4', 'container'];\r\n                \r\n        const alertTypeClass = {\r\n            [AlertType.Success]: 'alert-success',\r\n            [AlertType.Error]: 'alert-danger',\r\n            [AlertType.Info]: 'alert-info',\r\n            [AlertType.Warning]: 'alert-warning'\r\n        }\r\n\r\n        if (alert.type !== undefined) {\r\n            classes.push(alertTypeClass[alert.type]);\r\n        }\r\n\r\n        if (alert.fade) {\r\n            classes.push('fade');\r\n        }\r\n\r\n        return classes.join(' ');\r\n    }\r\n}","<div *ngFor=\"let alert of alerts\" class=\"{{cssClass(alert)}}\">\r\n    <span [innerHTML]=\"alert.message\"></span>\r\n    <button class=\"btn-close\" (click)=\"removeAlert(alert)\"></button>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}