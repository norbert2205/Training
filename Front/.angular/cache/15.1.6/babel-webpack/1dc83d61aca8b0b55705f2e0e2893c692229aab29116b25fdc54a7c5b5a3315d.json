{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\n// array in local storage for registered users\nconst usersKey = 'angular-14-registration-login-example-users';\nlet users = JSON.parse(localStorage.getItem(usersKey)) || [];\nexport class FakeBackendInterceptor {\n  intercept(request, next) {\n    const {\n      url,\n      method,\n      headers,\n      body\n    } = request;\n    return handleRoute();\n    function handleRoute() {\n      switch (true) {\n        case url.endsWith('/users/authenticate') && method === 'POST':\n          return authenticate();\n        case url.endsWith('/users/register') && method === 'POST':\n          return register();\n        case url.endsWith('/users') && method === 'GET':\n          return getUsers();\n        case url.match(/\\/users\\/\\d+$/) && method === 'GET':\n          return getUserById();\n        case url.match(/\\/users\\/\\d+$/) && method === 'PUT':\n          return updateUser();\n        case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n          return deleteUser();\n        default:\n          // pass through any requests not handled above\n          return next.handle(request);\n      }\n    }\n    // route functions\n    function authenticate() {\n      const {\n        username,\n        password\n      } = body;\n      const user = users.find(x => x.username === username && x.password === password);\n      if (!user) return error('Username or password is incorrect');\n      return ok({\n        ...basicDetails(user),\n        token: 'fake-jwt-token'\n      });\n    }\n    function register() {\n      const user = body;\n      if (users.find(x => x.username === user.username)) {\n        return error('Username \"' + user.username + '\" is already taken');\n      }\n      user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n      users.push(user);\n      localStorage.setItem(usersKey, JSON.stringify(users));\n      return ok();\n    }\n    function getUsers() {\n      if (!isLoggedIn()) return unauthorized();\n      return ok(users.map(x => basicDetails(x)));\n    }\n    function getUserById() {\n      if (!isLoggedIn()) return unauthorized();\n      const user = users.find(x => x.id === idFromUrl());\n      return ok(basicDetails(user));\n    }\n    function updateUser() {\n      if (!isLoggedIn()) return unauthorized();\n      let params = body;\n      let user = users.find(x => x.id === idFromUrl());\n      // only update password if entered\n      if (!params.password) {\n        delete params.password;\n      }\n      // update and save user\n      Object.assign(user, params);\n      localStorage.setItem(usersKey, JSON.stringify(users));\n      return ok();\n    }\n    function deleteUser() {\n      if (!isLoggedIn()) return unauthorized();\n      users = users.filter(x => x.id !== idFromUrl());\n      localStorage.setItem(usersKey, JSON.stringify(users));\n      return ok();\n    }\n    // helper functions\n    function ok(body) {\n      return of(new HttpResponse({\n        status: 200,\n        body\n      })).pipe(delay(500)); // delay observable to simulate server api call\n    }\n\n    function error(message) {\n      return throwError(() => ({\n        error: {\n          message\n        }\n      })).pipe(materialize(), delay(500), dematerialize()); // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648);\n    }\n\n    function unauthorized() {\n      return throwError(() => ({\n        status: 401,\n        error: {\n          message: 'Unauthorized'\n        }\n      })).pipe(materialize(), delay(500), dematerialize());\n    }\n    function basicDetails(user) {\n      const {\n        id,\n        username,\n        firstName,\n        lastName\n      } = user;\n      return {\n        id,\n        username,\n        firstName,\n        lastName\n      };\n    }\n    function isLoggedIn() {\n      return headers.get('Authorization') === 'Bearer fake-jwt-token';\n    }\n    function idFromUrl() {\n      const urlParts = url.split('/');\n      return parseInt(urlParts[urlParts.length - 1]);\n    }\n  }\n}\nFakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n  return new (t || FakeBackendInterceptor)();\n};\nFakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FakeBackendInterceptor,\n  factory: FakeBackendInterceptor.ɵfac\n});\nexport const fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","usersKey","users","JSON","parse","localStorage","getItem","FakeBackendInterceptor","intercept","request","next","url","method","headers","body","handleRoute","endsWith","authenticate","register","getUsers","match","getUserById","updateUser","deleteUser","handle","username","password","user","find","x","error","ok","basicDetails","token","id","length","Math","max","map","push","setItem","stringify","isLoggedIn","unauthorized","idFromUrl","params","Object","assign","filter","status","pipe","message","firstName","lastName","get","urlParts","split","parseInt","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["C:\\DevProjects\\training\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\r\n\r\n// array in local storage for registered users\r\nconst usersKey = 'angular-14-registration-login-example-users';\r\nlet users: any[] = JSON.parse(localStorage.getItem(usersKey)!) || [];\r\n\r\n@Injectable()\r\nexport class FakeBackendInterceptor implements HttpInterceptor {\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const { url, method, headers, body } = request;\r\n\r\n        return handleRoute();\r\n\r\n        function handleRoute() {\r\n            switch (true) {\r\n                case url.endsWith('/users/authenticate') && method === 'POST':\r\n                    return authenticate();\r\n                case url.endsWith('/users/register') && method === 'POST':\r\n                    return register();\r\n                case url.endsWith('/users') && method === 'GET':\r\n                    return getUsers();\r\n                case url.match(/\\/users\\/\\d+$/) && method === 'GET':\r\n                    return getUserById();\r\n                case url.match(/\\/users\\/\\d+$/) && method === 'PUT':\r\n                    return updateUser();\r\n                case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\r\n                    return deleteUser();\r\n                default:\r\n                    // pass through any requests not handled above\r\n                    return next.handle(request);\r\n            }    \r\n        }\r\n\r\n        // route functions\r\n\r\n        function authenticate() {\r\n            const { username, password } = body;\r\n            const user = users.find(x => x.username === username && x.password === password);\r\n            if (!user) return error('Username or password is incorrect');\r\n            return ok({\r\n                ...basicDetails(user),\r\n                token: 'fake-jwt-token'\r\n            })\r\n        }\r\n\r\n        function register() {\r\n            const user = body\r\n\r\n            if (users.find(x => x.username === user.username)) {\r\n                return error('Username \"' + user.username + '\" is already taken')\r\n            }\r\n\r\n            user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\r\n            users.push(user);\r\n            localStorage.setItem(usersKey, JSON.stringify(users));\r\n            return ok();\r\n        }\r\n\r\n        function getUsers() {\r\n            if (!isLoggedIn()) return unauthorized();\r\n            return ok(users.map(x => basicDetails(x)));\r\n        }\r\n\r\n        function getUserById() {\r\n            if (!isLoggedIn()) return unauthorized();\r\n\r\n            const user = users.find(x => x.id === idFromUrl());\r\n            return ok(basicDetails(user));\r\n        }\r\n\r\n        function updateUser() {\r\n            if (!isLoggedIn()) return unauthorized();\r\n\r\n            let params = body;\r\n            let user = users.find(x => x.id === idFromUrl());\r\n\r\n            // only update password if entered\r\n            if (!params.password) {\r\n                delete params.password;\r\n            }\r\n\r\n            // update and save user\r\n            Object.assign(user, params);\r\n            localStorage.setItem(usersKey, JSON.stringify(users));\r\n\r\n            return ok();\r\n        }\r\n\r\n        function deleteUser() {\r\n            if (!isLoggedIn()) return unauthorized();\r\n\r\n            users = users.filter(x => x.id !== idFromUrl());\r\n            localStorage.setItem(usersKey, JSON.stringify(users));\r\n            return ok();\r\n        }\r\n\r\n        // helper functions\r\n\r\n        function ok(body?: any) {\r\n            return of(new HttpResponse({ status: 200, body }))\r\n                .pipe(delay(500)); // delay observable to simulate server api call\r\n        }\r\n\r\n        function error(message: string) {\r\n            return throwError(() => ({ error: { message } }))\r\n                .pipe(materialize(), delay(500), dematerialize()); // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648);\r\n        }\r\n\r\n        function unauthorized() {\r\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }))\r\n                .pipe(materialize(), delay(500), dematerialize());\r\n        }\r\n\r\n        function basicDetails(user: any) {\r\n            const { id, username, firstName, lastName } = user;\r\n            return { id, username, firstName, lastName };\r\n        }\r\n\r\n        function isLoggedIn() {\r\n            return headers.get('Authorization') === 'Bearer fake-jwt-token';\r\n        }\r\n\r\n        function idFromUrl() {\r\n            const urlParts = url.split('/');\r\n            return parseInt(urlParts[urlParts.length - 1]);\r\n        }\r\n    }\r\n}\r\n\r\nexport const fakeBackendProvider = {\r\n    // use fake backend in place of Http service for backend-less development\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: FakeBackendInterceptor,\r\n    multi: true\r\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}