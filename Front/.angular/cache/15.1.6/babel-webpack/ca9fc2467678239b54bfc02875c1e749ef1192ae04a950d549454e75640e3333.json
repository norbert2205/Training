{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n    this.user = this.userSubject.asObservable();\n  }\n  get userValue() {\n    return this.userSubject.value;\n  }\n  login(username, password) {\n    return this.http.get(`${environment.apiUrl}/Account/Test`);\n    // .subscribe(_ => console.log(\"fgdfgdf\"));\n    var dupaaasasas = this.http.post(`${environment.apiUrl}/Account/Login`, {\n      username,\n      password\n    });\n    var dupa = this.http.post(`${environment.apiUrl}/Account/Login`, {\n      username,\n      password\n    }).pipe(map(user => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem('user', JSON.stringify(user));\n      this.userSubject.next(user);\n      return user;\n    }));\n    return dupa;\n  }\n  logout() {\n    // remove user from local storage and set current user to null\n    localStorage.removeItem('user');\n    this.userSubject.next(null);\n    this.router.navigate(['/account/login']);\n  }\n  register(user) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwZjNhZTUzMC1jYjQ2LTQ2NjctOTA4Mi0yZThkMjE2YmUxMWQiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiYWRtaW4iLCJleHAiOjE2NzczNDE3OTIsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3QiLCJhdWQiOiJodHRwOi8vbG9jYWxob3N0In0.iq7QqJJzV4XRjz-EwiJEvFzVAkKbcFhGzkWVcfk3CXE`\n    });\n    return this.http.post(`${environment.apiUrl}/Account/Register`, user, {\n      headers: headers\n    });\n    return this.http.post(`${environment.apiUrl}/users/register`, user);\n  }\n  getAll() {\n    return this.http.get(`${environment.apiUrl}/users`);\n  }\n  getById(id) {\n    return this.http.get(`${environment.apiUrl}/users/${id}`);\n  }\n  update(id, params) {\n    return this.http.put(`${environment.apiUrl}/users/${id}`, params).pipe(map(x => {\n      // update stored user if the logged in user updated their own record\n      if (id == this.userValue?.id) {\n        // update local storage\n        const user = {\n          ...this.userValue,\n          ...params\n        };\n        localStorage.setItem('user', JSON.stringify(user));\n        // publish updated user to subscribers\n        this.userSubject.next(user);\n      }\n      return x;\n    }));\n  }\n  delete(id) {\n    return this.http.delete(`${environment.apiUrl}/users/${id}`).pipe(map(x => {\n      // auto logout if the logged in user deleted their own record\n      if (id == this.userValue?.id) {\n        this.logout();\n      }\n      return x;\n    }));\n  }\n}\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","BehaviorSubject","map","environment","AccountService","constructor","router","http","userSubject","JSON","parse","localStorage","getItem","user","asObservable","userValue","value","login","username","password","get","apiUrl","dupaaasasas","post","dupa","pipe","setItem","stringify","next","logout","removeItem","navigate","register","headers","getAll","getById","id","update","params","put","x","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\DevProjects\\Training\\frontend\\src\\app\\_services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { environment } from '@environments/environment';\r\nimport { User } from '@app/_models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AccountService {\r\n    private userSubject: BehaviorSubject<User | null>;\r\n    public user: Observable<User | null>;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private http: HttpClient\r\n    ) {\r\n        this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')!));\r\n        this.user = this.userSubject.asObservable();\r\n    }\r\n\r\n    public get userValue() {\r\n        return this.userSubject.value;\r\n    }\r\n\r\n    login(username: string, password: string) {\r\n        return this.http.get<any>(`${environment.apiUrl}/Account/Test`);\r\n        // .subscribe(_ => console.log(\"fgdfgdf\"));\r\n        var dupaaasasas = this.http.post<string>(`${environment.apiUrl}/Account/Login`, { username, password });\r\n\r\n\r\n        var dupa = this.http.post<any>(`${environment.apiUrl}/Account/Login`, { username, password })\r\n            .pipe(map(user => {\r\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n                this.userSubject.next(user);\r\n                return user;\r\n            }))\r\n            return dupa;\r\n    }\r\n\r\n    logout() {\r\n        // remove user from local storage and set current user to null\r\n        localStorage.removeItem('user');\r\n        this.userSubject.next(null);\r\n        this.router.navigate(['/account/login']);\r\n    }\r\n\r\n    register(user: User) {\r\n        const headers = new HttpHeaders({\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwZjNhZTUzMC1jYjQ2LTQ2NjctOTA4Mi0yZThkMjE2YmUxMWQiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiYWRtaW4iLCJleHAiOjE2NzczNDE3OTIsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3QiLCJhdWQiOiJodHRwOi8vbG9jYWxob3N0In0.iq7QqJJzV4XRjz-EwiJEvFzVAkKbcFhGzkWVcfk3CXE`\r\n          })\r\n          \r\n        return this.http.post(`${environment.apiUrl}/Account/Register`, user, { headers: headers});\r\n        return this.http.post(`${environment.apiUrl}/users/register`, user);\r\n    }\r\n\r\n    getAll() {\r\n        return this.http.get<User[]>(`${environment.apiUrl}/users`);\r\n    }\r\n\r\n    getById(id: string) {\r\n        return this.http.get<User>(`${environment.apiUrl}/users/${id}`);\r\n    }\r\n\r\n    update(id: string, params: any) {\r\n        return this.http.put(`${environment.apiUrl}/users/${id}`, params)\r\n            .pipe(map(x => {\r\n                // update stored user if the logged in user updated their own record\r\n                if (id == this.userValue?.id) {\r\n                    // update local storage\r\n                    const user = { ...this.userValue, ...params };\r\n                    localStorage.setItem('user', JSON.stringify(user));\r\n\r\n                    // publish updated user to subscribers\r\n                    this.userSubject.next(user);\r\n                }\r\n                return x;\r\n            }));\r\n    }\r\n\r\n    delete(id: string) {\r\n        return this.http.delete(`${environment.apiUrl}/users/${id}`)\r\n            .pipe(map(x => {\r\n                // auto logout if the logged in user deleted their own record\r\n                if (id == this.userValue?.id) {\r\n                    this.logout();\r\n                }\r\n                return x;\r\n            }));\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}