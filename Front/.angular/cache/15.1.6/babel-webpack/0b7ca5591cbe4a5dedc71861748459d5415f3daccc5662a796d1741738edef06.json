{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport class ErrorInterceptor {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(err => {\n      if ([401, 403].includes(err.status) && this.accountService.userValue) {\n        // auto logout if 401 or 403 response returned from api\n        this.accountService.logout();\n      }\n      const error = err.error?.message || err.statusText;\n      console.error(err);\n      return throwError(() => error);\n    }));\n  }\n}\nErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n  return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AccountService));\n};\nErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorInterceptor,\n  factory: ErrorInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAK3C,OAAM,MAAOC,gBAAgB;EACzBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAmB;EAErDC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IAClD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAACR,UAAU,CAACS,GAAG,IAAG;MAC9C,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAACD,GAAG,CAACE,MAAM,CAAC,IAAI,IAAI,CAACR,cAAc,CAACS,SAAS,EAAE;QAClE;QACA,IAAI,CAACT,cAAc,CAACU,MAAM,EAAE;;MAGhC,MAAMC,KAAK,GAAGL,GAAG,CAACK,KAAK,EAAEC,OAAO,IAAIN,GAAG,CAACO,UAAU;MAClDC,OAAO,CAACH,KAAK,CAACL,GAAG,CAAC;MAClB,OAAOV,UAAU,CAAC,MAAMe,KAAK,CAAC;IAClC,CAAC,CAAC,CAAC;EACP;;AAdSb,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAiB,SAAhBjB,gBAAgB;AAAA","names":["throwError","catchError","ErrorInterceptor","constructor","accountService","intercept","request","next","handle","pipe","err","includes","status","userValue","logout","error","message","statusText","console","factory"],"sourceRoot":"","sources":["C:\\DevProjects\\Training\\frontend\\src\\app\\_helpers\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { AccountService } from '@app/_services';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    constructor(private accountService: AccountService) {}\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(catchError(err => {\r\n            if ([401, 403].includes(err.status) && this.accountService.userValue) {\r\n                // auto logout if 401 or 403 response returned from api\r\n                this.accountService.logout();\r\n            }\r\n\r\n            const error = err.error?.message || err.statusText;\r\n            console.error(err);\r\n            return throwError(() => error);\r\n        }))\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}